/*
 * generated by Xtext 2.28.0
 */
package life.game.validation

import life.game.gameDSL.GameDSLPackage.Literals
import life.game.gameDSL.GoL
import life.game.gameDSL.Grid
import life.game.gameDSL.Initialization
import life.game.gameDSL.Point
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class GameDSLValidator extends AbstractGameDSLValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					GameDSLPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	@Check
	def checkGridNotSmallerThanMin(Grid grid) {
		if (grid.width < 40) {
			error("Min width is 40!", null);
		}
		if (grid.height < 40) {
			error("Min height is 40!", null);
		}
	}
	
//	@Check
//	def checkGridNotTooBig(Grid grid) {
//		if ()
//	}

	@Check
	def checkPointsNotOutsideGrid(GoL gol) {
		// Default grid size		
		var xSize = 80 as int
		var ySize = 60 as int;
		if (gol.grid !== null) {
			xSize = gol.grid.width;
			ySize = gol.grid.height;
		}

		// For each initialization, go check if it contains points that we can check		
		for (Initialization init : gol.init) {
			if (init.getPoints !== null) {
				for (Point p: init.getPoints) {
					if (p.x < 0 || p.x > xSize) {
						error("Point falls outside of width!", p, null, -1);
					}
					if (p.y < 0 || p.y > ySize) {
						error("Point falls outside of height!", p, null, -1);
					}					
				}				
			}
		}
	}
}
